<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>一个卡牌游戏的设想</title>
    <link href="/2025/06/28/%E4%B8%80%E4%B8%AA%E5%8D%A1%E7%89%8C%E6%B8%B8%E6%88%8F%E7%9A%84%E8%AE%BE%E6%83%B3/"/>
    <url>/2025/06/28/%E4%B8%80%E4%B8%AA%E5%8D%A1%E7%89%8C%E6%B8%B8%E6%88%8F%E7%9A%84%E8%AE%BE%E6%83%B3/</url>
    
    <content type="html"><![CDATA[<p>我在学校里和同学利用好多鱼集卡大作战的卡设计了一个回合制的卡牌游戏，现在在尝试写成一个桌面游戏。等到大致成型了就把源码投到Github上，然后把这个贴子做成这个项目的官方网页。但是高三比较忙，可能比较慢吧</p>]]></content>
    
    
    
    <tags>
      
      <tag>项目说明</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OrangePi上运行Stable Diffusion</title>
    <link href="/2025/06/28/OrangePi%E4%B8%8A%E8%BF%90%E8%A1%8CStable-Diffusion/"/>
    <url>/2025/06/28/OrangePi%E4%B8%8A%E8%BF%90%E8%A1%8CStable-Diffusion/</url>
    
    <content type="html"><![CDATA[<p>Stable Diffusion是目前主流的AI绘图模型，但一般要求有英伟达的独立显卡，难以在OrangePi这种arm架构的设备上运行。我尝试了在我的OrangePi5Plus上运行了huggingface上的sd-1.5模型，经过到onnx再到rknn的模型转化，最后还做了一个webUI。下面给出流程，方便参考。 </p><p><strong>提醒：</strong>该方案最后精度实际上不高，没有太大的实用价值，因此只用于学习参考。</p><h1 id="材料准备"><a href="#材料准备" class="headerlink" title="材料准备"></a>材料准备</h1><ul><li>一台x86的主机，运行了Linux系统 </li><li>Windows主机（可选） </li><li>可以访问<a href="https://huggingface.co/">https://huggingface.co</a>和<a href="https://github.com/">https://github.com</a>的网络 </li><li>最好有pip，Anaconda和huggingface的镜像,比如huggingface的镜像我使用的是<a href="https://hf-mirror.com/">https://hf-mirror.com/</a></li></ul><h1 id="主机阶段"><a href="#主机阶段" class="headerlink" title="主机阶段"></a>主机阶段</h1><p>在x86Linux主机上进行，最好预留至少90GB的硬盘空间，保证至少16GB的运行内存（不然可能被kill进程）.<br><code>orange_pi_sd_project/       # 项目根目录 </code><br><code>├── scripts/                 # 存放所有转换脚本</code><br><code>│   ├── 01_merge_models.py   # 模型合并脚本 </code><br><code>│   ├── 02_convert_to_onnx.py # ONNX转换脚本 </code><br><code>│   └── 03_convert_to_rknn.py # RKNN转换脚本 </code><br><code>├── working/                # 工作目录（存放中间文件）</code><br><code>│   ├── merged_models/      # 合并后的模型 </code><br><code>│   ├── onnx_models/        # ONNX格式模型 </code><br><code>│   └── rknn_models/        # 最终RKNN模型 </code><br><code>── calib_data/             # 校准数据集</code></p><h2 id="模型下载"><a href="#模型下载" class="headerlink" title="模型下载"></a>模型下载</h2><p>从huggingface上下载sd-v1.5原始模型和LCM-LoRA适配器。</p><h2 id="合并模型"><a href="#合并模型" class="headerlink" title="合并模型"></a>合并模型</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> diffusers <span class="hljs-keyword">import</span> StableDiffusionPipeline<br><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> os<br>LOCAL_SD15_PATH = <span class="hljs-string">&quot;./models/stable-diffusion-v1-5&quot;</span>  <span class="hljs-comment"># SD1.5原始模型目录</span><br>LOCAL_LCM_LORA_PATH = <span class="hljs-string">&quot;./models/lcm-lora-sdv1-5&quot;</span>    <span class="hljs-comment"># LCM-LoRA适配器目录</span><br>MERGED_PATH = <span class="hljs-string">&quot;./lcm_sd15_merged&quot;</span>                   <span class="hljs-comment"># 合并后模型保存路径</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">validate_model_directories</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;只检查必要的核心文件&quot;&quot;&quot;</span><br>    <span class="hljs-comment"># SD1.5 必须的文件</span><br>    sd_required = [<br>        <span class="hljs-string">&quot;model_index.json&quot;</span>,<br>        <span class="hljs-string">&quot;unet/config.json&quot;</span>,<br>        <span class="hljs-string">&quot;unet/diffusion_pytorch_model.bin&quot;</span>,<br>        <span class="hljs-string">&quot;vae/config.json&quot;</span>,<br>        <span class="hljs-string">&quot;text_encoder/config.json&quot;</span><br>    ]    <br>    <span class="hljs-comment"># LCM-LoRA 只需要权重文件</span><br>    lcm_required = [<br>        <span class="hljs-string">&quot;unet/diffusion_pytorch_model.safetensors&quot;</span><br>    ]    <br>    missing_files = []    <br>    <span class="hljs-comment"># 验证 SD1.5</span><br>    <span class="hljs-keyword">for</span> file <span class="hljs-keyword">in</span> sd_required:<br>        path = os.path.join(LOCAL_SD15_PATH, file)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(path):<br>            missing_files.append(path)    <br>    <span class="hljs-comment"># 验证 LCM-LoRA</span><br>    <span class="hljs-keyword">for</span> file <span class="hljs-keyword">in</span> lcm_required:<br>        path = os.path.join(LOCAL_LCM_LORA_PATH, file)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(path):<br>            missing_files.append(path)   <br>    <span class="hljs-keyword">if</span> missing_files:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;❌ 错误: 以下必需文件缺失:&quot;</span>)<br>        <span class="hljs-keyword">for</span> file <span class="hljs-keyword">in</span> missing_files:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;  - <span class="hljs-subst">&#123;file&#125;</span>&quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;请确保模型已正确下载&quot;</span>)<br>        exit(<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;✅ 所有必需模型文件存在&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;🔍 验证本地模型文件...&quot;</span>)<br>validate_model_directories()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;⏳ 加载Stable Diffusion 1.5基础模型...&quot;</span>)<br><span class="hljs-keyword">try</span>:<br>    pipe = StableDiffusionPipeline.from_pretrained(<br>        LOCAL_SD15_PATH,<br>        torch_dtype=torch.float32,<br>        safety_checker=<span class="hljs-literal">None</span><br>    )<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;✅ SD1.5模型加载成功&quot;</span>)<br><span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;❌ SD1.5模型加载失败: <span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(e)&#125;</span>&quot;</span>)<br>    exit(<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;⏳ 加载并应用LCM-LoRA适配器...&quot;</span>)<br><span class="hljs-keyword">try</span>:<br>    <span class="hljs-comment"># 直接加载LCM-LoRA权重到管道</span><br>    pipe.load_lora_weights(LOCAL_LCM_LORA_PATH)    <br>    <span class="hljs-comment"># 重要：融合LoRA权重到主模型</span><br>    pipe.fuse_lora()    <br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;✅ LCM-LoRA适配器加载成功&quot;</span>)    <br>    <span class="hljs-comment"># 设置LCM调度器</span><br>    <span class="hljs-keyword">from</span> diffusers <span class="hljs-keyword">import</span> LCMScheduler<br>    pipe.scheduler = LCMScheduler.from_config(pipe.scheduler.config)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;✅ LCM调度器设置完成&quot;</span>)<br><span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;❌ LCM-LoRA加载失败: <span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(e)&#125;</span>&quot;</span>)<br>    exit(<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;⏳ 保存合并后的模型...&quot;</span>)<br><span class="hljs-keyword">try</span>:<br>    <span class="hljs-comment"># 仅保存必要的组件</span><br>    pipe.save_pretrained(<br>        MERGED_PATH,<br>        safe_serialization=<span class="hljs-literal">True</span><br>    )<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;✅ 合并模型已保存到: <span class="hljs-subst">&#123;MERGED_PATH&#125;</span>&quot;</span>)<br><span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;❌ 模型保存失败: <span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(e)&#125;</span>&quot;</span>)<br>    exit(<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p>这是<code>01_merge_models.py</code>,不赘述 </p><h2 id="转化到ONNX"><a href="#转化到ONNX" class="headerlink" title="转化到ONNX"></a>转化到ONNX</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">from</span> pathlib <span class="hljs-keyword">import</span> Path<br><span class="hljs-keyword">from</span> diffusers <span class="hljs-keyword">import</span> StableDiffusionPipeline<br><span class="hljs-keyword">import</span> onnx<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> warnings<br><span class="hljs-keyword">import</span> logging<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>warnings.filterwarnings(<span class="hljs-string">&quot;ignore&quot;</span>, category=torch.jit.TracerWarning)<br>warnings.filterwarnings(<span class="hljs-string">&quot;ignore&quot;</span>, category=UserWarning)<br>warnings.filterwarnings(<span class="hljs-string">&quot;ignore&quot;</span>, category=FutureWarning)<br>logging.getLogger(<span class="hljs-string">&quot;transformers&quot;</span>).setLevel(logging.ERROR)<br>logging.getLogger(<span class="hljs-string">&quot;diffusers&quot;</span>).setLevel(logging.ERROR)<br>model_path = <span class="hljs-string">&quot;../working/merged_models&quot;</span>  <span class="hljs-comment"># 合并后模型路径</span><br>onnx_path = <span class="hljs-string">&quot;../working/onnx_models&quot;</span>     <span class="hljs-comment"># ONNX模型输出路径</span><br>device = <span class="hljs-string">&quot;cuda&quot;</span> <span class="hljs-keyword">if</span> torch.cuda.is_available() <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;cpu&quot;</span><br>Path(onnx_path).mkdir(parents=<span class="hljs-literal">True</span>, exist_ok=<span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;🔍 验证模型目录...&quot;</span>)<br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(model_path):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;❌ 错误: 模型目录不存在 - <span class="hljs-subst">&#123;model_path&#125;</span>&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;请先运行模型合并脚本&quot;</span>)<br>    sys.exit(<span class="hljs-number">1</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;✅ 模型目录验证成功: <span class="hljs-subst">&#123;model_path&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;⏳ 加载合并后的模型管道...&quot;</span>)<br>start_time = time.time()<br><span class="hljs-keyword">try</span>:<br>    <span class="hljs-comment"># 使用更安全的方式加载模型</span><br>    pipe = StableDiffusionPipeline.from_pretrained(<br>        model_path, <br>        torch_dtype=torch.float16,<br>        use_safetensors=<span class="hljs-literal">True</span>,<br>        safety_checker=<span class="hljs-literal">None</span>,<br>        feature_extractor=<span class="hljs-literal">None</span>,<br>        requires_safety_checker=<span class="hljs-literal">False</span><br>    ).to(device)    <br>    <span class="hljs-comment"># 设置模型为评估模式</span><br>    pipe.text_encoder.<span class="hljs-built_in">eval</span>()<br>    pipe.unet.<span class="hljs-built_in">eval</span>()<br>    pipe.vae.<span class="hljs-built_in">eval</span>()    <br>    load_time = time.time() - start_time<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;✅ 模型加载成功! 耗时: <span class="hljs-subst">&#123;load_time:<span class="hljs-number">.1</span>f&#125;</span>秒&quot;</span>)<br><span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;❌ 模型加载失败: <span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(e)&#125;</span>&quot;</span>)<br>    sys.exit(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">safe_onnx_export</span>(<span class="hljs-params">model, args, f, **kwargs</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;处理TracerWarning的安全导出函数&quot;&quot;&quot;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;  开始导出模型...&quot;</span>)<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-comment"># 临时禁用警告</span><br>        <span class="hljs-keyword">with</span> warnings.catch_warnings():<br>            warnings.simplefilter(<span class="hljs-string">&quot;ignore&quot;</span>)<br>            torch.onnx.export(model, args, f, **kwargs)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;  导出过程中出错: <span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(e)&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n&quot;</span> + <span class="hljs-string">&quot;=&quot;</span>*<span class="hljs-number">50</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;🔄 开始转换Text Encoder到ONNX格式...&quot;</span>)<br><span class="hljs-keyword">try</span>:<br>    text_encoder = pipe.text_encoder<br>    text_encoder.<span class="hljs-built_in">eval</span>()    <br>    <span class="hljs-comment"># 准备输入</span><br>    input_ids = torch.ones((<span class="hljs-number">1</span>, <span class="hljs-number">77</span>), dtype=torch.long, device=device)   <br>    <span class="hljs-comment"># 导出ONNX</span><br>    encoder_path = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;onnx_path&#125;</span>/text_encoder.onnx&quot;</span>    <br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> safe_onnx_export(<br>        text_encoder,<br>        (input_ids,),<br>        encoder_path,<br>        input_names=[<span class="hljs-string">&quot;input_ids&quot;</span>],<br>        output_names=[<span class="hljs-string">&quot;text_embeddings&quot;</span>],<br>        dynamic_axes=&#123;<br>            <span class="hljs-string">&quot;input_ids&quot;</span>: &#123;<span class="hljs-number">0</span>: <span class="hljs-string">&quot;batch&quot;</span>&#125;,<br>            <span class="hljs-string">&quot;text_embeddings&quot;</span>: &#123;<span class="hljs-number">0</span>: <span class="hljs-string">&quot;batch&quot;</span>&#125;<br>        &#125;,<br>        opset_version=<span class="hljs-number">14</span><br>    ):<br>        <span class="hljs-keyword">raise</span> RuntimeError(<span class="hljs-string">&quot;Text Encoder导出失败&quot;</span>)    <br>    <span class="hljs-comment"># 验证输出</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;✅ Text Encoder转换成功! 保存到: <span class="hljs-subst">&#123;encoder_path&#125;</span>&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;   - 模型大小: <span class="hljs-subst">&#123;os.path.getsize(encoder_path)/<span class="hljs-number">1024</span>/<span class="hljs-number">1024</span>:<span class="hljs-number">.1</span>f&#125;</span> MB&quot;</span>)    <br><span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;❌ Text Encoder转换失败: <span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(e)&#125;</span>&quot;</span>)<br>    sys.exit(<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n&quot;</span> + <span class="hljs-string">&quot;=&quot;</span>*<span class="hljs-number">50</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;🔄 开始转换UNet到ONNX格式...&quot;</span>)<br><span class="hljs-keyword">try</span>:<br>    unet = pipe.unet<br>    unet.<span class="hljs-built_in">eval</span>()    <br>    <span class="hljs-comment"># 准备输入 - 使用更小的batch size避免内存问题</span><br>    sample = torch.randn(<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">64</span>, <span class="hljs-number">64</span>).to(device, torch.float16)<br>    timestep = torch.tensor([<span class="hljs-number">1</span>]).to(device, torch.float16)<br>    encoder_hidden_states = torch.randn(<span class="hljs-number">1</span>, <span class="hljs-number">77</span>, <span class="hljs-number">768</span>).to(device, torch.float16)    <br>    <span class="hljs-comment"># 导出ONNX</span><br>    unet_path = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;onnx_path&#125;</span>/unet.onnx&quot;</span>    <br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> safe_onnx_export(<br>        unet,<br>        (sample, timestep, encoder_hidden_states),<br>        unet_path,<br>        input_names=[<span class="hljs-string">&quot;sample&quot;</span>, <span class="hljs-string">&quot;timestep&quot;</span>, <span class="hljs-string">&quot;encoder_hidden_states&quot;</span>],<br>        output_names=[<span class="hljs-string">&quot;noise_pred&quot;</span>],<br>        dynamic_axes=&#123;<br>            <span class="hljs-string">&quot;sample&quot;</span>: &#123;<span class="hljs-number">0</span>: <span class="hljs-string">&quot;batch&quot;</span>&#125;,<br>            <span class="hljs-string">&quot;encoder_hidden_states&quot;</span>: &#123;<span class="hljs-number">0</span>: <span class="hljs-string">&quot;batch&quot;</span>&#125;,<br>            <span class="hljs-string">&quot;noise_pred&quot;</span>: &#123;<span class="hljs-number">0</span>: <span class="hljs-string">&quot;batch&quot;</span>&#125;<br>        &#125;,<br>        opset_version=<span class="hljs-number">14</span><br>    ):<br>        <span class="hljs-keyword">raise</span> RuntimeError(<span class="hljs-string">&quot;UNet导出失败&quot;</span>)    <br>    <span class="hljs-comment"># 验证输出</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;✅ UNet转换成功! 保存到: <span class="hljs-subst">&#123;unet_path&#125;</span>&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;   - 模型大小: <span class="hljs-subst">&#123;os.path.getsize(unet_path)/<span class="hljs-number">1024</span>/<span class="hljs-number">1024</span>:<span class="hljs-number">.1</span>f&#125;</span> MB&quot;</span>)    <br><span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;❌ UNet转换失败: <span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(e)&#125;</span>&quot;</span>)<br>    sys.exit(<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n&quot;</span> + <span class="hljs-string">&quot;=&quot;</span>*<span class="hljs-number">50</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;🔄 开始转换VAE解码器到ONNX格式...&quot;</span>)<br><span class="hljs-keyword">try</span>:<br>    vae = pipe.vae<br>    vae.<span class="hljs-built_in">eval</span>()    <br>    <span class="hljs-comment"># 准备输入 - 修正通道问题</span><br>    <span class="hljs-comment"># 注意：VAE解码器实际期望输入为 [batch, 4, height, width]</span><br>    latent = torch.randn(<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">64</span>, <span class="hljs-number">64</span>).to(device, torch.float16)    <br>    <span class="hljs-comment"># 创建VAE解码器的包装类，解决通道问题</span><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">VAEDecoderWrapper</span>(torch.nn.Module):<br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, vae</span>):<br>            <span class="hljs-built_in">super</span>().__init__()<br>            <span class="hljs-variable language_">self</span>.decoder = vae.decoder<br>            <span class="hljs-variable language_">self</span>.post_quant_conv = vae.post_quant_conv        <br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, latent</span>):<br>            <span class="hljs-comment"># 正确的处理流程</span><br>            latent = <span class="hljs-variable language_">self</span>.post_quant_conv(latent)<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.decoder(latent)    <br>    <span class="hljs-comment"># 使用包装后的模型</span><br>    vae_decoder_wrapper = VAEDecoderWrapper(vae).to(device).<span class="hljs-built_in">eval</span>()    <br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;✅ 已创建VAE解码器包装器解决通道问题&quot;</span>)    <br>    <span class="hljs-comment"># 导出ONNX</span><br>    vae_path = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;onnx_path&#125;</span>/vae_decoder.onnx&quot;</span>    <br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> safe_onnx_export(<br>        vae_decoder_wrapper,<br>        latent,<br>        vae_path,<br>        input_names=[<span class="hljs-string">&quot;latent&quot;</span>],<br>        output_names=[<span class="hljs-string">&quot;image&quot;</span>],<br>        opset_version=<span class="hljs-number">14</span><br>    ):<br>        <span class="hljs-keyword">raise</span> RuntimeError(<span class="hljs-string">&quot;VAE解码器导出失败&quot;</span>)    <br>    <span class="hljs-comment"># 验证输出</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;✅ VAE解码器转换成功! 保存到: <span class="hljs-subst">&#123;vae_path&#125;</span>&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;   - 模型大小: <span class="hljs-subst">&#123;os.path.getsize(vae_path)/<span class="hljs-number">1024</span>/<span class="hljs-number">1024</span>:<span class="hljs-number">.1</span>f&#125;</span> MB&quot;</span>)    <br>    <span class="hljs-comment"># 额外验证输出形状</span><br>    <span class="hljs-keyword">with</span> torch.no_grad():<br>        output = vae_decoder_wrapper(latent)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;   - 输出形状: <span class="hljs-subst">&#123;output.shape&#125;</span> (应为 [1, 3, 512, 512])&quot;</span>)    <br><span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;❌ VAE解码器转换失败: <span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(e)&#125;</span>&quot;</span>)<br>    <span class="hljs-comment"># 提供详细错误信息</span><br>    <span class="hljs-keyword">import</span> traceback<br>    traceback.print_exc()<br>    sys.exit(<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n&quot;</span> + <span class="hljs-string">&quot;=&quot;</span>*<span class="hljs-number">50</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;🛠️ 开始优化ONNX模型...&quot;</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">optimize_onnx_model</span>(<span class="hljs-params">input_path, output_path</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;优化ONNX模型并转换为FP16&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-comment"># 简化模型</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;  正在简化模型: <span class="hljs-subst">&#123;os.path.basename(input_path)&#125;</span>&quot;</span>)<br>        model = onnx.load(input_path)        <br>        <span class="hljs-comment"># 使用ONNX Simplifier</span><br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">import</span> onnxsim<br>            model_simp, check = onnxsim.simplify(model)<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> check:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;  警告: 模型简化验证失败，但将继续使用简化模型&quot;</span>)<br>            simplified_model = model_simp<br>        <span class="hljs-keyword">except</span> ImportError:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;  警告: onnxsim未安装，跳过简化步骤&quot;</span>)<br>            simplified_model = model        <br>        <span class="hljs-comment"># 保存简化后的模型</span><br>        simplified_path = input_path.replace(<span class="hljs-string">&quot;.onnx&quot;</span>, <span class="hljs-string">&quot;_sim.onnx&quot;</span>)<br>        onnx.save(simplified_model, simplified_path)        <br>        <span class="hljs-comment"># 转换为FP16</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;  正在转换为FP16: <span class="hljs-subst">&#123;os.path.basename(input_path)&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">from</span> onnxconverter_common <span class="hljs-keyword">import</span> float16<br>            fp16_model = float16.convert_float_to_float16(simplified_model, keep_io_types=<span class="hljs-literal">True</span>)<br>        <span class="hljs-keyword">except</span> ImportError:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;  警告: onnxconverter-common未安装，跳过FP16转换&quot;</span>)<br>            fp16_model = simplified_model        <br>        <span class="hljs-comment"># 保存优化后的模型</span><br>        onnx.save(fp16_model, output_path)        <br>        <span class="hljs-comment"># 验证优化后的模型</span><br>        <span class="hljs-keyword">try</span>:<br>            onnx.checker.check_model(output_path)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;  ✅ 模型验证通过&quot;</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">except</span> onnx.checker.ValidationError <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;  ⚠️ 模型验证警告: <span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(e)&#125;</span>&quot;</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span>  <span class="hljs-comment"># 即使有警告也继续        </span><br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;  优化失败: <span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(e)&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>success = <span class="hljs-literal">True</span><br><span class="hljs-keyword">for</span> model_name <span class="hljs-keyword">in</span> [<span class="hljs-string">&quot;text_encoder&quot;</span>, <span class="hljs-string">&quot;unet&quot;</span>, <span class="hljs-string">&quot;vae_decoder&quot;</span>]:<br>    input_path = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;onnx_path&#125;</span>/<span class="hljs-subst">&#123;model_name&#125;</span>.onnx&quot;</span><br>    output_path = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;onnx_path&#125;</span>/<span class="hljs-subst">&#123;model_name&#125;</span>_fp16.onnx&quot;</span>    <br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;\n🔧 优化 <span class="hljs-subst">&#123;model_name&#125;</span>...&quot;</span>)<br>    <span class="hljs-keyword">if</span> optimize_onnx_model(input_path, output_path):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;✅ <span class="hljs-subst">&#123;model_name&#125;</span>优化成功! 保存到: <span class="hljs-subst">&#123;output_path&#125;</span>&quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;   - 优化后大小: <span class="hljs-subst">&#123;os.path.getsize(output_path)/<span class="hljs-number">1024</span>/<span class="hljs-number">1024</span>:<span class="hljs-number">.1</span>f&#125;</span> MB&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;❌ <span class="hljs-subst">&#123;model_name&#125;</span>优化失败&quot;</span>)<br>        success = <span class="hljs-literal">False</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n&quot;</span> + <span class="hljs-string">&quot;=&quot;</span>*<span class="hljs-number">50</span>)<br>total_time = time.time() - start_time<br><span class="hljs-keyword">if</span> success:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;🎉 所有模型转换完成! 总耗时: <span class="hljs-subst">&#123;total_time/<span class="hljs-number">60</span>:<span class="hljs-number">.1</span>f&#125;</span>分钟&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;下一步: 运行RKNN转换脚本&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;⚠️ 转换完成但有错误! 总耗时: <span class="hljs-subst">&#123;total_time/<span class="hljs-number">60</span>:<span class="hljs-number">.1</span>f&#125;</span>分钟&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;建议: 检查错误信息并尝试重新运行&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;=&quot;</span>*<span class="hljs-number">50</span>) <br></code></pre></td></tr></table></figure><p>这是<code>02_convert_to_onnx.py</code>脚本，有注释和充足的输出提示，不赘述 </p><h2 id="转化到RKNN"><a href="#转化到RKNN" class="headerlink" title="转化到RKNN"></a>转化到RKNN</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> rknn.api <span class="hljs-keyword">import</span> RKNN<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> logging<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> shutil<br>logging.basicConfig(level=logging.INFO, <br>                    <span class="hljs-built_in">format</span>=<span class="hljs-string">&#x27;%(asctime)s - %(levelname)s - %(message)s&#x27;</span>,<br>                    handlers=[<br>                        logging.StreamHandler(),<br>                        logging.FileHandler(<span class="hljs-string">&#x27;rknn_conversion.log&#x27;</span>)<br>                    ])<br>logger = logging.getLogger(<span class="hljs-string">&quot;RKNN_Converter&quot;</span>)<br>BASE_DIR = os.path.dirname(os.path.abspath(__file__))<br>ONNX_MODEL_DIR = os.path.abspath(os.path.join(BASE_DIR, <span class="hljs-string">&quot;./onnx_models&quot;</span>))<br>RKNN_MODEL_DIR = os.path.abspath(os.path.join(BASE_DIR, <span class="hljs-string">&quot;./rknn_models&quot;</span>))<br>CALIB_DATA_DIR = os.path.abspath(os.path.join(BASE_DIR, <span class="hljs-string">&quot;./calib_data&quot;</span>))<br>TARGET_PLATFORM = <span class="hljs-string">&quot;rk3588&quot;</span><br>os.makedirs(RKNN_MODEL_DIR, exist_ok=<span class="hljs-literal">True</span>)<br>os.makedirs(CALIB_DATA_DIR, exist_ok=<span class="hljs-literal">True</span>)<br>SUPPORTED_QUANT_TYPES = &#123;<br>    <span class="hljs-string">&quot;rk3588&quot;</span>: [<span class="hljs-string">&quot;asymmetric_quantized-8&quot;</span>, <span class="hljs-string">&quot;dynamic_fixed_point-8&quot;</span>, <span class="hljs-string">&quot;float16&quot;</span>]<br>&#125;<br>MODEL_CONFIGS = &#123;<br>    <span class="hljs-string">&quot;text_encoder&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;input_nodes&quot;</span>: [<span class="hljs-string">&quot;input_ids&quot;</span>],<br>        <span class="hljs-string">&quot;input_shapes&quot;</span>: [[<span class="hljs-number">1</span>, <span class="hljs-number">77</span>]],<br>        <span class="hljs-string">&quot;calib_data&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;input_ids&quot;</span>: os.path.join(CALIB_DATA_DIR, <span class="hljs-string">&quot;text_encoder_input.npy&quot;</span>)<br>        &#125;,<br>        <span class="hljs-string">&quot;quantized_dtype&quot;</span>: <span class="hljs-string">&quot;asymmetric_quantized-8&quot;</span>,  <span class="hljs-comment"># RK3588支持的量化类型</span><br>        <span class="hljs-string">&quot;optimization_level&quot;</span>: <span class="hljs-number">3</span>,<br>        <span class="hljs-string">&quot;quantized_method&quot;</span>: <span class="hljs-string">&quot;channel&quot;</span>  <span class="hljs-comment"># 量化方法</span><br>    &#125;,<br>    <span class="hljs-string">&quot;unet&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;input_nodes&quot;</span>: [<span class="hljs-string">&quot;sample&quot;</span>, <span class="hljs-string">&quot;timestep&quot;</span>, <span class="hljs-string">&quot;encoder_hidden_states&quot;</span>],<br>        <span class="hljs-string">&quot;input_shapes&quot;</span>: [[<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">64</span>, <span class="hljs-number">64</span>], [<span class="hljs-number">1</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">77</span>, <span class="hljs-number">768</span>]],<br>        <span class="hljs-string">&quot;calib_data&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;sample&quot;</span>: os.path.join(CALIB_DATA_DIR, <span class="hljs-string">&quot;unet_sample.npy&quot;</span>),<br>            <span class="hljs-string">&quot;encoder_hidden_states&quot;</span>: os.path.join(CALIB_DATA_DIR, <span class="hljs-string">&quot;unet_emb.npy&quot;</span>)<br>        &#125;,<br>        <span class="hljs-string">&quot;quantized_dtype&quot;</span>: <span class="hljs-string">&quot;asymmetric_quantized-8&quot;</span>,  <span class="hljs-comment"># RK3588支持的量化类型</span><br>        <span class="hljs-string">&quot;optimization_level&quot;</span>: <span class="hljs-number">2</span>,  <span class="hljs-comment"># 降低优化级别避免内存问题</span><br>        <span class="hljs-string">&quot;quantized_method&quot;</span>: <span class="hljs-string">&quot;layer&quot;</span>  <span class="hljs-comment"># 量化方法</span><br>    &#125;,<br>    <span class="hljs-string">&quot;vae_decoder&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;input_nodes&quot;</span>: [<span class="hljs-string">&quot;latent&quot;</span>],<br>        <span class="hljs-string">&quot;input_shapes&quot;</span>: [[<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">64</span>, <span class="hljs-number">64</span>]],<br>        <span class="hljs-string">&quot;calib_data&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;latent&quot;</span>: os.path.join(CALIB_DATA_DIR, <span class="hljs-string">&quot;unet_sample.npy&quot;</span>)  <span class="hljs-comment"># 复用UNet的样本</span><br>        &#125;,<br>        <span class="hljs-string">&quot;quantized_dtype&quot;</span>: <span class="hljs-string">&quot;asymmetric_quantized-8&quot;</span>,  <span class="hljs-comment"># RK3588支持的量化类型</span><br>        <span class="hljs-string">&quot;optimization_level&quot;</span>: <span class="hljs-number">3</span>,<br>        <span class="hljs-string">&quot;quantized_method&quot;</span>: <span class="hljs-string">&quot;channel&quot;</span>  <span class="hljs-comment"># 量化方法</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check_model_exists</span>(<span class="hljs-params">model_name</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;检查RKNN模型是否已存在&quot;&quot;&quot;</span><br>    rknn_path = os.path.join(RKNN_MODEL_DIR, <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;model_name&#125;</span>.rknn&quot;</span>)<br>    <span class="hljs-keyword">if</span> os.path.exists(rknn_path):<br>        logger.info(<span class="hljs-string">f&quot;✅ 检测到已存在的RKNN模型: <span class="hljs-subst">&#123;model_name&#125;</span>.rknn&quot;</span>)<br>        logger.info(<span class="hljs-string">f&quot;   大小: <span class="hljs-subst">&#123;os.path.getsize(rknn_path)/<span class="hljs-number">1024</span>/<span class="hljs-number">1024</span>:<span class="hljs-number">.1</span>f&#125;</span> MB&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">create_calib_dataset</span>(<span class="hljs-params">model_name</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;创建校准数据集并返回文件路径&quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 创建特定于模型的校准目录</span><br>    model_calib_dir = os.path.join(CALIB_DATA_DIR, <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;model_name&#125;</span>_calib&quot;</span>)<br>    <span class="hljs-keyword">if</span> os.path.exists(model_calib_dir):<br>        shutil.rmtree(model_calib_dir)  <span class="hljs-comment"># 清理旧数据</span><br>    os.makedirs(model_calib_dir, exist_ok=<span class="hljs-literal">True</span>)    <br>    <span class="hljs-comment"># 生成校准样本 (减少到3个以加快处理)</span><br>    num_samples = <span class="hljs-number">3</span><br>    logger.info(<span class="hljs-string">f&quot;  生成 <span class="hljs-subst">&#123;num_samples&#125;</span> 个校准样本...&quot;</span>)    <br>    <span class="hljs-comment"># 为每个输入节点创建单独的数据文件</span><br>    input_files = []<br>    <span class="hljs-keyword">for</span> node_name <span class="hljs-keyword">in</span> MODEL_CONFIGS[model_name][<span class="hljs-string">&quot;input_nodes&quot;</span>]:<br>        <span class="hljs-comment"># 找到对应的输入形状</span><br>        shape = <span class="hljs-literal">None</span><br>        <span class="hljs-keyword">for</span> j, node <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(MODEL_CONFIGS[model_name][<span class="hljs-string">&quot;input_nodes&quot;</span>]):<br>            <span class="hljs-keyword">if</span> node == node_name:<br>                shape = MODEL_CONFIGS[model_name][<span class="hljs-string">&quot;input_shapes&quot;</span>][j]<br>                <span class="hljs-keyword">break</span>        <br>        <span class="hljs-keyword">if</span> shape:<br>            <span class="hljs-comment"># 为每个输入节点创建数据文件</span><br>            node_files = []<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num_samples):<br>                <span class="hljs-comment"># 创建随机数据</span><br>                data_path = os.path.join(model_calib_dir, <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;node_name&#125;</span>_<span class="hljs-subst">&#123;i&#125;</span>.npy&quot;</span>)                <br>                <span class="hljs-comment"># 对于时间步长特殊处理</span><br>                <span class="hljs-keyword">if</span> node_name == <span class="hljs-string">&quot;timestep&quot;</span>:<br>                    data = np.array([i], dtype=np.float32)  <span class="hljs-comment"># 简单递增</span><br>                <span class="hljs-keyword">else</span>:<br>                    data = np.random.rand(*shape).astype(np.float32)                <br>                np.save(data_path, data)<br>                node_files.append(data_path)            <br>            input_files.append(node_files)    <br>    <span class="hljs-comment"># 创建数据集文件</span><br>    calib_file_path = os.path.join(model_calib_dir, <span class="hljs-string">&quot;calib_dataset.txt&quot;</span>)<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(calib_file_path, <span class="hljs-string">&quot;w&quot;</span>) <span class="hljs-keyword">as</span> f:<br>        <span class="hljs-comment"># 写入每个样本的数据</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num_samples):<br>            sample_line = []<br>            <span class="hljs-keyword">for</span> node_files <span class="hljs-keyword">in</span> input_files:<br>                sample_line.append(node_files[i])<br>            f.write(<span class="hljs-string">&quot; &quot;</span>.join(sample_line) + <span class="hljs-string">&quot;\n&quot;</span>)    <br>    logger.info(<span class="hljs-string">f&quot;  创建校准数据集文件: <span class="hljs-subst">&#123;calib_file_path&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">return</span> calib_file_path<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">convert_model</span>(<span class="hljs-params">model_name</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;转换单个模型到RKNN格式&quot;&quot;&quot;</span><br>    logger.info(<span class="hljs-string">f&quot;🚀 开始转换 <span class="hljs-subst">&#123;model_name.upper()&#125;</span> 模型...&quot;</span>)    <br>    <span class="hljs-comment"># 检查是否已完成</span><br>    <span class="hljs-keyword">if</span> check_model_exists(model_name):<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span>    <br>    <span class="hljs-comment"># 初始化RKNN对象</span><br>    rknn = RKNN(verbose=<span class="hljs-literal">True</span>)    <br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-comment"># 步骤1: 配置参数</span><br>        logger.info(<span class="hljs-string">&quot;   设置配置参数...&quot;</span>)        <br>        <span class="hljs-comment"># 使用RK3588支持的量化类型</span><br>        quant_type = MODEL_CONFIGS[model_name].get(<span class="hljs-string">&quot;quantized_dtype&quot;</span>, <span class="hljs-string">&quot;asymmetric_quantized-8&quot;</span>)        <br>        <span class="hljs-comment"># 验证量化类型是否受支持</span><br>        <span class="hljs-keyword">if</span> quant_type <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> SUPPORTED_QUANT_TYPES[TARGET_PLATFORM]:<br>            logger.warning(<span class="hljs-string">f&quot;  量化类型 <span class="hljs-subst">&#123;quant_type&#125;</span> 不被 <span class="hljs-subst">&#123;TARGET_PLATFORM&#125;</span> 支持，使用默认值&quot;</span>)<br>            quant_type = <span class="hljs-string">&quot;asymmetric_quantized-8&quot;</span>        <br>        config_params = &#123;<br>            <span class="hljs-string">&#x27;target_platform&#x27;</span>: TARGET_PLATFORM,<br>            <span class="hljs-string">&#x27;quantized_dtype&#x27;</span>: quant_type,<br>            <span class="hljs-string">&#x27;optimization_level&#x27;</span>: MODEL_CONFIGS[model_name].get(<span class="hljs-string">&quot;optimization_level&quot;</span>, <span class="hljs-number">3</span>),<br>            <span class="hljs-string">&#x27;quantized_method&#x27;</span>: MODEL_CONFIGS[model_name].get(<span class="hljs-string">&quot;quantized_method&quot;</span>, <span class="hljs-string">&quot;channel&quot;</span>),<br>        &#125;        <br>        <span class="hljs-comment"># 添加可选参数 - 只使用布尔值</span><br>        <span class="hljs-keyword">if</span> model_name == <span class="hljs-string">&quot;unet&quot;</span>:<br>            config_params[<span class="hljs-string">&#x27;output_optimize&#x27;</span>] = <span class="hljs-literal">True</span>  <span class="hljs-comment"># 只保留output_optimize参数</span><br>            <span class="hljs-comment"># 已移除sparse_infer参数，因为rk3588不支持            </span><br>        logger.info(<span class="hljs-string">f&quot;   量化配置: <span class="hljs-subst">&#123;config_params[<span class="hljs-string">&#x27;quantized_dtype&#x27;</span>]&#125;</span>&quot;</span>)<br>        logger.info(<span class="hljs-string">f&quot;   优化级别: <span class="hljs-subst">&#123;config_params[<span class="hljs-string">&#x27;optimization_level&#x27;</span>]&#125;</span>&quot;</span>)<br>        logger.info(<span class="hljs-string">f&quot;   量化方法: <span class="hljs-subst">&#123;config_params[<span class="hljs-string">&#x27;quantized_method&#x27;</span>]&#125;</span>&quot;</span>)        <br>        <span class="hljs-comment"># 检查配置参数是否有效</span><br>        logger.info(<span class="hljs-string">&quot;   验证配置参数...&quot;</span>)<br>        ret = rknn.config(**config_params)<br>        <span class="hljs-keyword">if</span> ret != <span class="hljs-number">0</span>:<br>            logger.error(<span class="hljs-string">f&quot;❌ 配置失败! 错误码: <span class="hljs-subst">&#123;ret&#125;</span>&quot;</span>)            <br>            <span class="hljs-comment"># 尝试使用更安全的配置</span><br>            logger.warning(<span class="hljs-string">&quot;⚠️ 尝试使用默认配置...&quot;</span>)<br>            safe_config = &#123;<br>                <span class="hljs-string">&#x27;target_platform&#x27;</span>: TARGET_PLATFORM,<br>                <span class="hljs-string">&#x27;quantized_dtype&#x27;</span>: <span class="hljs-string">&quot;asymmetric_quantized-8&quot;</span>,<br>                <span class="hljs-string">&#x27;optimization_level&#x27;</span>: <span class="hljs-number">1</span>,<br>            &#125;<br>            ret = rknn.config(**safe_config)<br>            <span class="hljs-keyword">if</span> ret != <span class="hljs-number">0</span>:<br>                logger.error(<span class="hljs-string">&quot;❌ 安全配置也失败，终止转换&quot;</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>        <br>        <span class="hljs-comment"># 步骤2: 加载ONNX模型</span><br>        onnx_path = os.path.join(ONNX_MODEL_DIR, <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;model_name&#125;</span>_fp16.onnx&quot;</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(onnx_path):<br>            logger.error(<span class="hljs-string">f&quot;❌ ONNX模型文件不存在: <span class="hljs-subst">&#123;onnx_path&#125;</span>&quot;</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>        <br>        logger.info(<span class="hljs-string">f&quot;   加载ONNX模型: <span class="hljs-subst">&#123;os.path.basename(onnx_path)&#125;</span>&quot;</span>)<br>        logger.info(<span class="hljs-string">f&quot;   输入节点: <span class="hljs-subst">&#123;MODEL_CONFIGS[model_name][<span class="hljs-string">&#x27;input_nodes&#x27;</span>]&#125;</span>&quot;</span>)<br>        logger.info(<span class="hljs-string">f&quot;   输入形状: <span class="hljs-subst">&#123;MODEL_CONFIGS[model_name][<span class="hljs-string">&#x27;input_shapes&#x27;</span>]&#125;</span>&quot;</span>)        <br>        ret = rknn.load_onnx(<br>            model=onnx_path,<br>            inputs=MODEL_CONFIGS[model_name][<span class="hljs-string">&quot;input_nodes&quot;</span>],<br>            input_size_list=MODEL_CONFIGS[model_name][<span class="hljs-string">&quot;input_shapes&quot;</span>]<br>        )<br>        <span class="hljs-keyword">if</span> ret != <span class="hljs-number">0</span>:<br>            logger.error(<span class="hljs-string">f&quot;❌ 加载ONNX模型失败! 错误码: <span class="hljs-subst">&#123;ret&#125;</span>&quot;</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>        <br>        <span class="hljs-comment"># 步骤3: 构建模型</span><br>        logger.info(<span class="hljs-string">&quot;   构建RKNN模型...&quot;</span>)        <br>        <span class="hljs-comment"># 创建校准数据集文件</span><br>        calib_file_path = create_calib_dataset(model_name)        <br>        <span class="hljs-comment"># 验证校准文件</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(calib_file_path):<br>            logger.error(<span class="hljs-string">f&quot;❌ 校准文件不存在: <span class="hljs-subst">&#123;calib_file_path&#125;</span>&quot;</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>        <br>        <span class="hljs-comment"># 打印校准文件内容用于调试</span><br>        logger.info(<span class="hljs-string">f&quot;   校准文件内容预览:&quot;</span>)<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(calib_file_path, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>            lines = f.readlines()<br>            <span class="hljs-keyword">for</span> i, line <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(lines[:<span class="hljs-built_in">min</span>(<span class="hljs-number">2</span>, <span class="hljs-built_in">len</span>(lines))]):  <span class="hljs-comment"># 只显示前2行</span><br>                logger.info(<span class="hljs-string">f&quot;     样本 <span class="hljs-subst">&#123;i+<span class="hljs-number">1</span>&#125;</span>: <span class="hljs-subst">&#123;line.strip()&#125;</span>&quot;</span>)        <br>        start_time = time.time()        <br>        <span class="hljs-comment"># 构建参数 - 只保留基本参数</span><br>        build_params = &#123;<br>            <span class="hljs-string">&#x27;do_quantization&#x27;</span>: <span class="hljs-literal">True</span>,<br>            <span class="hljs-string">&#x27;dataset&#x27;</span>: calib_file_path,<br>        &#125;        <br>        <span class="hljs-comment"># 对于UNet模型添加特殊提示</span><br>        <span class="hljs-keyword">if</span> model_name == <span class="hljs-string">&quot;unet&quot;</span>:<br>            logger.info(<span class="hljs-string">&quot;   UNet检测到 - 使用最小构建参数&quot;</span>)<br>            logger.info(<span class="hljs-string">&quot;   ⚠️ 注意: UNet转换可能需要较长时间和较大内存&quot;</span>)            <br>        ret = rknn.build(**build_params)<br>        build_time = time.time() - start_time        <br>        <span class="hljs-keyword">if</span> ret != <span class="hljs-number">0</span>:<br>            logger.error(<span class="hljs-string">f&quot;❌ 构建失败! 错误码: <span class="hljs-subst">&#123;ret&#125;</span>&quot;</span>)<br>            logger.error(<span class="hljs-string">&quot;   可能原因: 内存不足或不支持的算子&quot;</span>)            <br>            <span class="hljs-comment"># 对于UNet尝试更低优化级别</span><br>            <span class="hljs-keyword">if</span> model_name == <span class="hljs-string">&quot;unet&quot;</span>:<br>                logger.warning(<span class="hljs-string">&quot;⚠️ 尝试使用优化级别0重新构建UNet...&quot;</span>)<br>                rknn.config(optimization_level=<span class="hljs-number">0</span>)<br>                start_time = time.time()<br>                ret = rknn.build(do_quantization=<span class="hljs-literal">True</span>, dataset=calib_file_path)<br>                build_time = time.time() - start_time<br>                <span class="hljs-keyword">if</span> ret != <span class="hljs-number">0</span>:<br>                    logger.error(<span class="hljs-string">&quot;❌ 优化级别0也失败，终止转换&quot;</span>)<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>                logger.info(<span class="hljs-string">f&quot;   构建成功! 耗时: <span class="hljs-subst">&#123;build_time:<span class="hljs-number">.1</span>f&#125;</span>秒&quot;</span>)        <br>        logger.info(<span class="hljs-string">f&quot;   构建成功! 耗时: <span class="hljs-subst">&#123;build_time:<span class="hljs-number">.1</span>f&#125;</span>秒&quot;</span>)        <br>        <span class="hljs-comment"># 步骤4: 导出RKNN模型</span><br>        rknn_path = os.path.join(RKNN_MODEL_DIR, <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;model_name&#125;</span>.rknn&quot;</span>)<br>        logger.info(<span class="hljs-string">f&quot;   导出RKNN模型到: <span class="hljs-subst">&#123;rknn_path&#125;</span>&quot;</span>)        <br>        ret = rknn.export_rknn(rknn_path)<br>        <span class="hljs-keyword">if</span> ret != <span class="hljs-number">0</span>:<br>            logger.error(<span class="hljs-string">f&quot;❌ 导出失败! 错误码: <span class="hljs-subst">&#123;ret&#125;</span>&quot;</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>        <br>        <span class="hljs-comment"># 验证模型大小</span><br>        <span class="hljs-keyword">if</span> os.path.exists(rknn_path):<br>            size_mb = os.path.getsize(rknn_path) / (<span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>)<br>            logger.info(<span class="hljs-string">f&quot;✅ <span class="hljs-subst">&#123;model_name.upper()&#125;</span> 转换成功! 大小: <span class="hljs-subst">&#123;size_mb:<span class="hljs-number">.1</span>f&#125;</span> MB&quot;</span>)            <br>            <span class="hljs-comment"># 验证模型是否可以加载</span><br>            logger.info(<span class="hljs-string">&quot;   验证模型加载...&quot;</span>)<br>            rknn_lite = RKNN()<br>            ret = rknn_lite.load_rknn(rknn_path)<br>            <span class="hljs-keyword">if</span> ret != <span class="hljs-number">0</span>:<br>                logger.warning(<span class="hljs-string">&quot;⚠️ 模型加载验证失败&quot;</span>)<br>            <span class="hljs-keyword">else</span>:<br>                logger.info(<span class="hljs-string">&quot;✅ 模型加载验证成功&quot;</span>)<br>            rknn_lite.release()            <br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">else</span>:<br>            logger.error(<span class="hljs-string">&quot;❌ 导出文件未生成&quot;</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>        <br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        logger.error(<span class="hljs-string">f&quot;❌ 转换过程中发生异常: <span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(e)&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">import</span> traceback<br>        logger.error(traceback.format_exc())<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">finally</span>:<br>        <span class="hljs-comment"># 释放资源</span><br>        rknn.release()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    logger.info(<span class="hljs-string">&quot;=&quot;</span> * <span class="hljs-number">60</span>)<br>    logger.info(<span class="hljs-string">f&quot;📡 开始RKNN模型转换 - 目标平台: <span class="hljs-subst">&#123;TARGET_PLATFORM&#125;</span>&quot;</span>)<br>    logger.info(<span class="hljs-string">f&quot;🔧 当前工作目录: <span class="hljs-subst">&#123;os.getcwd()&#125;</span>&quot;</span>)<br>    logger.info(<span class="hljs-string">f&quot;🔧 项目根目录: <span class="hljs-subst">&#123;BASE_DIR&#125;</span>&quot;</span>)<br>    logger.info(<span class="hljs-string">f&quot;🔧 ONNX模型目录: <span class="hljs-subst">&#123;ONNX_MODEL_DIR&#125;</span>&quot;</span>)<br>    logger.info(<span class="hljs-string">f&quot;💾 RKNN输出目录: <span class="hljs-subst">&#123;RKNN_MODEL_DIR&#125;</span>&quot;</span>)<br>    logger.info(<span class="hljs-string">f&quot;📊 校准数据目录: <span class="hljs-subst">&#123;CALIB_DATA_DIR&#125;</span>&quot;</span>)<br>    logger.info(<span class="hljs-string">f&quot;📊 支持的量化类型: <span class="hljs-subst">&#123;SUPPORTED_QUANT_TYPES[TARGET_PLATFORM]&#125;</span>&quot;</span>)<br>    logger.info(<span class="hljs-string">&quot;=&quot;</span> * <span class="hljs-number">60</span>)<br>        <span class="hljs-comment"># 检查环境</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(ONNX_MODEL_DIR):<br>        logger.error(<span class="hljs-string">&quot;❌ 错误: ONNX模型目录不存在&quot;</span>)<br>        logger.error(<span class="hljs-string">&quot;请先完成ONNX转换&quot;</span>)<br>        <span class="hljs-keyword">return</span><br>        <span class="hljs-comment"># 确保校准数据目录存在</span><br>    os.makedirs(CALIB_DATA_DIR, exist_ok=<span class="hljs-literal">True</span>)<br>        <span class="hljs-comment"># 转换顺序 - 先转换小型模型测试环境</span><br>    models_to_convert = [<span class="hljs-string">&quot;text_encoder&quot;</span>, <span class="hljs-string">&quot;vae_decoder&quot;</span>, <span class="hljs-string">&quot;unet&quot;</span>]<br>    success = <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">for</span> model_name <span class="hljs-keyword">in</span> models_to_convert:<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> convert_model(model_name):<br>            logger.error(<span class="hljs-string">f&quot;❌ <span class="hljs-subst">&#123;model_name.upper()&#125;</span> 转换失败，终止流程&quot;</span>)<br>            success = <span class="hljs-literal">False</span><br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-comment"># 结果报告</span><br>    logger.info(<span class="hljs-string">&quot;=&quot;</span> * <span class="hljs-number">60</span>)<br>    <span class="hljs-keyword">if</span> success:<br>        logger.info(<span class="hljs-string">&quot;🎉 所有模型转换完成!&quot;</span>)<br>        logger.info(<span class="hljs-string">f&quot;RKNN模型已保存到: <span class="hljs-subst">&#123;RKNN_MODEL_DIR&#125;</span>&quot;</span>)<br>                <span class="hljs-comment"># 显示最终模型大小</span><br>        total_size = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> model_name <span class="hljs-keyword">in</span> models_to_convert:<br>            model_path = os.path.join(RKNN_MODEL_DIR, <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;model_name&#125;</span>.rknn&quot;</span>)<br>            <span class="hljs-keyword">if</span> os.path.exists(model_path):<br>                size = os.path.getsize(model_path) / (<span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>)<br>                total_size += size<br>                logger.info(<span class="hljs-string">f&quot;  - <span class="hljs-subst">&#123;model_name&#125;</span>.rknn: <span class="hljs-subst">&#123;size:<span class="hljs-number">.1</span>f&#125;</span> MB&quot;</span>)        <br>        logger.info(<span class="hljs-string">f&quot;💾 总大小: <span class="hljs-subst">&#123;total_size:<span class="hljs-number">.1</span>f&#125;</span> MB&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        logger.error(<span class="hljs-string">&quot;💥 转换过程出错，请检查日志文件&quot;</span>)<br>        logger.info(<span class="hljs-string">&quot;=&quot;</span> * <span class="hljs-number">60</span>)<br>    logger.info(<span class="hljs-string">&quot;下一步: 将RKNN模型复制到Orange Pi进行推理&quot;</span>)<br>    logger.info(<span class="hljs-string">&quot;=&quot;</span> * <span class="hljs-number">60</span>)<br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    start_time = time.time()<br>    main()<br>    logger.info(<span class="hljs-string">f&quot;总耗时: <span class="hljs-subst">&#123;(time.time() - start_time)/<span class="hljs-number">60</span>:<span class="hljs-number">.1</span>f&#125;</span> 分钟&quot;</span>)<br></code></pre></td></tr></table></figure><p>这是<code>03_convert_to_rknn.py</code>,不赘述 </p><p>至此，我们就得到了rknn的模型。 之后就只要把模型导到OrangePi上运行即可。 </p><h1 id="OrangePi阶段"><a href="#OrangePi阶段" class="headerlink" title="OrangePi阶段"></a>OrangePi阶段</h1><p>webUI相对灵活，样式风格多，不给出方法，仅给出推理脚本。 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> rknnlite.api <span class="hljs-keyword">import</span> RKNNLite<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> logging<br>logging.basicConfig(<br>    level=logging.INFO,<br>    <span class="hljs-built_in">format</span>=<span class="hljs-string">&#x27;%(asctime)s - %(levelname)s - %(message)s&#x27;</span><br>)<br>logger = logging.getLogger(<span class="hljs-string">&quot;SD-RKNN&quot;</span>)<br>MODELS = &#123;<br>    <span class="hljs-string">&quot;text_encoder&quot;</span>: <span class="hljs-string">&quot;rknn_models/text_encoder.rknn&quot;</span>,<br>    <span class="hljs-string">&quot;unet&quot;</span>: <span class="hljs-string">&quot;rknn_models/unet.rknn&quot;</span>,<br>    <span class="hljs-string">&quot;vae_decoder&quot;</span>: <span class="hljs-string">&quot;rknn_models/vae_decoder.rknn&quot;</span><br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">StableDiffusionRKNN</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-variable language_">self</span>.models = &#123;&#125;<br>        <span class="hljs-variable language_">self</span>.rknn_instances = &#123;&#125;<br>        <span class="hljs-variable language_">self</span>.load_models()    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">load_models</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;加载所有RKNN模型&quot;&quot;&quot;</span><br>        logger.info(<span class="hljs-string">&quot;=&quot;</span>*<span class="hljs-number">50</span>)<br>        logger.info(<span class="hljs-string">&quot;🚀 正在加载Stable Diffusion模型&quot;</span>)<br>        start_time = time.time()        <br>        <span class="hljs-comment"># 加载顺序：文本编码器 -&gt; UNet -&gt; VAE解码器</span><br>        <span class="hljs-variable language_">self</span>.load_model(<span class="hljs-string">&quot;text_encoder&quot;</span>)<br>        <span class="hljs-variable language_">self</span>.load_model(<span class="hljs-string">&quot;unet&quot;</span>)<br>        <span class="hljs-variable language_">self</span>.load_model(<span class="hljs-string">&quot;vae_decoder&quot;</span>)        <br>        logger.info(<span class="hljs-string">f&quot;✅ 所有模型加载完成! 耗时: <span class="hljs-subst">&#123;time.time()-start_time:<span class="hljs-number">.1</span>f&#125;</span>秒&quot;</span>)<br>        logger.info(<span class="hljs-string">&quot;=&quot;</span>*<span class="hljs-number">50</span>)    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">load_model</span>(<span class="hljs-params">self, name</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;加载单个模型&quot;&quot;&quot;</span><br>        logger.info(<span class="hljs-string">f&quot;🔧 加载 <span class="hljs-subst">&#123;name&#125;</span> 模型...&quot;</span>)<br>        start_time = time.time()       <br>        rknn = RKNNLite()<br>        path = MODELS[name]        <br>        <span class="hljs-comment"># 1. 加载RKNN模型</span><br>        ret = rknn.load_rknn(path)<br>        <span class="hljs-keyword">if</span> ret != <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">f&quot;加载 <span class="hljs-subst">&#123;name&#125;</span> 模型失败: 错误码 <span class="hljs-subst">&#123;ret&#125;</span>&quot;</span>)        <br>        <span class="hljs-comment"># 2. 初始化运行时 (使用NPU核心0)</span><br>        ret = rknn.init_runtime(core_mask=RKNNLite.NPU_CORE_0)<br>        <span class="hljs-keyword">if</span> ret != <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">f&quot;初始化 <span class="hljs-subst">&#123;name&#125;</span> 运行时失败: 错误码 <span class="hljs-subst">&#123;ret&#125;</span>&quot;</span>)        <br>        <span class="hljs-variable language_">self</span>.rknn_instances[name] = rknn<br>        logger.info(<span class="hljs-string">f&quot;✅ <span class="hljs-subst">&#123;name&#125;</span> 加载成功! 耗时: <span class="hljs-subst">&#123;time.time()-start_time:<span class="hljs-number">.1</span>f&#125;</span>秒&quot;</span>)    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">text_encoder</span>(<span class="hljs-params">self, input_ids</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;文本编码器推理&quot;&quot;&quot;</span><br>        logger.info(<span class="hljs-string">&quot;📝 运行文本编码器...&quot;</span>)<br>        start = time.time()        <br>        <span class="hljs-comment"># 执行推理</span><br>        outputs = <span class="hljs-variable language_">self</span>.rknn_instances[<span class="hljs-string">&quot;text_encoder&quot;</span>].inference(inputs=[input_ids])        <br>        <span class="hljs-comment"># 返回文本嵌入</span><br>        text_embeddings = outputs[<span class="hljs-number">0</span>]<br>        logger.info(<span class="hljs-string">f&quot;✅ 文本编码完成! 耗时: <span class="hljs-subst">&#123;time.time()-start:<span class="hljs-number">.2</span>f&#125;</span>秒&quot;</span>)<br>        <span class="hljs-keyword">return</span> text_embeddings   <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">unet</span>(<span class="hljs-params">self, latent, timestep, text_embeddings</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;UNet推理&quot;&quot;&quot;</span><br>        logger.info(<span class="hljs-string">&quot;🎨 运行UNet...&quot;</span>)<br>        start = time.time()        <br>        <span class="hljs-comment"># 执行推理</span><br>        outputs = <span class="hljs-variable language_">self</span>.rknn_instances[<span class="hljs-string">&quot;unet&quot;</span>].inference(<br>            inputs=[latent, timestep, text_embeddings]<br>        )        <br>        <span class="hljs-comment"># 返回噪声预测</span><br>        noise_pred = outputs[<span class="hljs-number">0</span>]<br>        logger.info(<span class="hljs-string">f&quot;✅ UNet完成! 耗时: <span class="hljs-subst">&#123;time.time()-start:<span class="hljs-number">.2</span>f&#125;</span>秒&quot;</span>)<br>        <span class="hljs-keyword">return</span> noise_pred    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">vae_decoder</span>(<span class="hljs-params">self, latent</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;VAE解码器推理&quot;&quot;&quot;</span><br>        logger.info(<span class="hljs-string">&quot;🖼️ 运行VAE解码器...&quot;</span>)<br>        start = time.time()        <br>        <span class="hljs-comment"># 执行推理</span><br>        outputs = <span class="hljs-variable language_">self</span>.rknn_instances[<span class="hljs-string">&quot;vae_decoder&quot;</span>].inference(inputs=[latent])        <br>        <span class="hljs-comment"># 返回图像</span><br>        image = outputs[<span class="hljs-number">0</span>]<br>        logger.info(<span class="hljs-string">f&quot;✅ VAE解码完成! 耗时: <span class="hljs-subst">&#123;time.time()-start:<span class="hljs-number">.2</span>f&#125;</span>秒&quot;</span>)<br>        <span class="hljs-keyword">return</span> image    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_image</span>(<span class="hljs-params">self, prompt, steps=<span class="hljs-number">20</span>, guidance_scale=<span class="hljs-number">7.5</span>, seed=<span class="hljs-number">42</span></span>):<br>        <span class="hljs-string">&quot;&quot;&quot;生成图像主函数&quot;&quot;&quot;</span><br>        logger.info(<span class="hljs-string">f&quot;\n🎨 开始生成图像: &#x27;<span class="hljs-subst">&#123;prompt&#125;</span>&#x27;&quot;</span>)<br>        logger.info(<span class="hljs-string">f&quot;⚙️ 参数: <span class="hljs-subst">&#123;steps&#125;</span>步, 引导比例: <span class="hljs-subst">&#123;guidance_scale&#125;</span>, 种子: <span class="hljs-subst">&#123;seed&#125;</span>&quot;</span>)        <br>        <span class="hljs-comment"># 设置随机种子 (确保可重复性)</span><br>        np.random.seed(seed)        <br>        <span class="hljs-comment"># 1. 文本编码 (简化处理)</span><br>        <span class="hljs-comment"># 实际应用中应使用分词器将prompt转换为input_ids</span><br>        input_ids = np.ones((<span class="hljs-number">1</span>, <span class="hljs-number">77</span>), dtype=np.int64)<br>        text_embeddings = <span class="hljs-variable language_">self</span>.text_encoder(input_ids)        <br>        <span class="hljs-comment"># 2. 准备初始潜在变量</span><br>        latents = np.random.randn(<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">64</span>, <span class="hljs-number">64</span>).astype(np.float32)        <br>        <span class="hljs-comment"># 3. 扩散过程</span><br>        <span class="hljs-keyword">for</span> step <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(steps):<br>            logger.info(<span class="hljs-string">f&quot;⏳ 扩散步骤 <span class="hljs-subst">&#123;step+<span class="hljs-number">1</span>&#125;</span>/<span class="hljs-subst">&#123;steps&#125;</span>&quot;</span>)            <br>            <span class="hljs-comment"># 时间步长 (简化处理)</span><br>            t = np.array([step / steps * <span class="hljs-number">1000</span>], dtype=np.float32)            <br>            <span class="hljs-comment"># UNet预测噪声</span><br>            noise_pred = <span class="hljs-variable language_">self</span>.unet(latents, t, text_embeddings)            <br>            <span class="hljs-comment"># 更新潜在变量 (简化处理)</span><br>            latents = latents - <span class="hljs-number">0.1</span> * noise_pred        <br>        <span class="hljs-comment"># 4. VAE解码生成图像</span><br>        image = <span class="hljs-variable language_">self</span>.vae_decoder(latents)        <br>        <span class="hljs-comment"># 5. 后处理并保存图像</span><br>        <span class="hljs-comment"># 将输出转换为0-255范围的图像</span><br>        image = image.transpose(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>)[<span class="hljs-number">0</span>]  <span class="hljs-comment"># 转换维度 (BCHW -&gt; BHWC)</span><br>        image = ((image + <span class="hljs-number">1</span>) * <span class="hljs-number">127.5</span>).clip(<span class="hljs-number">0</span>, <span class="hljs-number">255</span>).astype(np.uint8)        <br>        <span class="hljs-comment"># 创建PIL图像</span><br>        img = Image.fromarray(image)<br>        <span class="hljs-keyword">return</span> img    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">release</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;释放所有模型资源&quot;&quot;&quot;</span><br>        logger.info(<span class="hljs-string">&quot;\n🔌 释放模型资源...&quot;</span>)<br>        <span class="hljs-keyword">for</span> name, rknn <span class="hljs-keyword">in</span> <span class="hljs-variable language_">self</span>.rknn_instances.items():<br>            rknn.release()<br>            logger.info(<span class="hljs-string">f&quot;✅ <span class="hljs-subst">&#123;name&#125;</span> 已释放&quot;</span>)<br>sd_instance = <span class="hljs-literal">None</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_sd_instance</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;获取Stable Diffusion实例 (单例)&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">global</span> sd_instance<br>    <span class="hljs-keyword">if</span> sd_instance <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        sd_instance = StableDiffusionRKNN()<br>    <span class="hljs-keyword">return</span> sd_instance<br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-comment"># 测试生成</span><br>    sd = get_sd_instance()<br>    <span class="hljs-keyword">try</span>:<br>        user_input = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;type the prompt&quot;</span>)<br>        image = sd.generate_image(user_input, steps=<span class="hljs-number">15</span>)<br>        image.save(<span class="hljs-string">&quot;test_output.png&quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;✅ 测试图像已保存: test_output.png&quot;</span>)<br>    <span class="hljs-keyword">finally</span>:<br>        sd.release()<br></code></pre></td></tr></table></figure><p>运行它就可得到结果了 </p><p>方法多有不足，本人在人工智能方面没有什么基础因此希望读者多多包涵。 </p>]]></content>
    
    
    
    <tags>
      
      <tag>技术</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>随笔</title>
    <link href="/2024/10/09/%E9%9A%8F%E7%AC%94/"/>
    <url>/2024/10/09/%E9%9A%8F%E7%AC%94/</url>
    
    <content type="html"><![CDATA[<p>今年诺贝尔物理学奖居然颁给神经网络了，这也是逆天，审评机构有什么资格这样颁奖。<br>虽然说神经网络可能运用了物理的某个分支，但是这毕竟不算物理学的成就，假如应用了物理的其他学科成就也能算物理成就的话，那登月还可以拿诺贝尔奖了，<br>所以这个肯定是不合理的。 </p>]]></content>
    
    
    
    <tags>
      
      <tag>其他</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机装机</title>
    <link href="/2024/07/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A3%85%E6%9C%BA/"/>
    <url>/2024/07/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A3%85%E6%9C%BA/</url>
    
    <content type="html"><![CDATA[<p>我们这个系列只是大概提供一下一些大厂的硬件的型号含义,一些接口标准之类,并不介绍理论硬件知识.<br>理论硬件可以以后再出。 </p>]]></content>
    
    
    
    <tags>
      
      <tag>技术</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机装机(CPU)</title>
    <link href="/2024/07/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A3%85%E6%9C%BA-CPU/"/>
    <url>/2024/07/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A3%85%E6%9C%BA-CPU/</url>
    
    <content type="html"><![CDATA[<p>本文主要介绍中央处理器(CPU). </p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>中央处理器（CPU），是电子计算机的主要设备之一，电脑中的核心配件。其功能主要是解释计算机指令以及处理计算机软件中的数据。CPU是计算机中负责读取<br>指令，对指令译码并执行指令的核心部件。中央处理器主要包括两个部分，即控制器、运算器，其中还包括高速缓冲存储器及实现它们之间联系的数据、控制的<br>总线。电子计算机三大核心部件就是CPU、内部存储器、输入&#x2F;输出设备。中央处理器的功效主要为处理指令、执行操作、控制时间、处理数据。<br>在计算机体系结构中，CPU是对计算机的所有硬件资源（如存储器、输入输出单元） 进行控制调配、执行通用运算的核心硬件单元。CPU是计算机的运算和控制<br>核心。计算机系统中所有软件层的操作，最终都将通过指令集映射为CPU的操作。 </p><h1 id="大致分类"><a href="#大致分类" class="headerlink" title="大致分类"></a>大致分类</h1><p>按CPU指令集架构分，大致可以分为<strong>x86</strong>和<strong>ARM</strong>两种。<br>其中x86按字长可以分为64位和32位（现在，以前也有16位等更小的），它们通常称为<strong>x86-64(或amd64)<strong>和</strong>x86</strong>.<br>从理论上讲一般x86使用复杂指令集(CISC)功耗更大但性能更好，而ARM使用精简指令集(RISC)则刚好相反，所以一般PC和工作站服务器使用x86多，而移动设<br>备用ARM多。但也不绝对。<br><strong>但也需注意，RISC还有其他架构如RISC-V,LoongArc,MIPS等，但在个人电脑上不常见。</strong><br>我们下文一般都讨论x86架构的CPU，因为个人电脑上使用ARM架构的主要为Apple的M处理器，与装机无关。 </p><h1 id="性能数据"><a href="#性能数据" class="headerlink" title="性能数据"></a>性能数据</h1><ul><li>CPU主频：即时钟频率，pass </li><li>外频：基准频率，决定主板的运行速度，主频&#x3D;外频*倍频系数 </li><li>制程：单位nm，决定单位面积可容纳的晶体管数 </li><li>缓存：速度极高 </li><li>总线频率：CPU总线的速度，CPU总线连接CPU与其他部件 </li><li>CPU内核和CPU线程：内核数为芯片组的数量，CPU线程又称逻辑处理器</li></ul><h1 id="品牌及其型号说明"><a href="#品牌及其型号说明" class="headerlink" title="品牌及其型号说明"></a>品牌及其型号说明</h1><p>目前市面上主要为Inter和AMD。 </p><h2 id="Inter"><a href="#Inter" class="headerlink" title="Inter"></a>Inter</h2><h3 id="Inter的子品牌"><a href="#Inter的子品牌" class="headerlink" title="Inter的子品牌"></a>Inter的子品牌</h3><ul><li>酷睿（Core）：桌面，面向中、高端消费者，工作站和发烧级别处理器品牌 </li><li>奔腾（Pentium）：入门级桌面，比酷睿低一个级别 </li><li>赛扬（Celeron）：低端桌面，低端PC，比奔腾低一个级别 </li><li>凌动（Atom）：面向移动设备，嵌入式设备，如手机、平板、上网本、工控设备等 </li><li>夸克（Quark）：面向智能穿戴、物联网设备，已停止开发 </li><li>至强（Xeon）：面向企业服务器和工作站 </li><li>安腾（Itanium）：针对企业服务器、UNIX小型机，用于高端市场，已停止开发.<br>我们指介绍酷睿和至强的版本号。</li></ul><h3 id="酷睿-Core"><a href="#酷睿-Core" class="headerlink" title="酷睿(Core)"></a>酷睿(Core)</h3><p>如Core™ i7 7700K</p><h4 id="档位规格"><a href="#档位规格" class="headerlink" title="档位规格"></a>档位规格</h4><p>有i3,i5,i7,i9四档，其他条件相同时数字越大越好。 </p><h4 id="后随数字-十代除外"><a href="#后随数字-十代除外" class="headerlink" title="后随数字(十代除外)"></a>后随数字(十代除外)</h4><p>第一位或前两位(如果是5个数字就是前两位)是代数。从1到现在的14.其他条件相同时，代数越大就越强。<br>后一位表示等级，越大越好，有5，6，7，8，9五级。<br>再后一位是核显型号，有3，5，0三种，3指高性能处理器配HD4600，5指用Iris5100，5200或Pro5200，0指HD4600.<br>再后一位指电压规格，有0，2，8三种，分别为47W，37W，28W. </p><h4 id="尾标"><a href="#尾标" class="headerlink" title="尾标"></a>尾标</h4><ul><li>U:低电压 </li><li>H:高压不可拆卸 </li><li>M:移动标准 </li><li>G:后接数字表示核显等级 </li><li>S:低功耗 </li><li>T:超低功耗 </li><li>Y:超低电压 </li><li>P:无显卡 </li><li>X:至尊性能 </li><li>Q:四核心极致性能 </li><li>K:不锁倍频 </li><li>E:嵌入式工程级 </li><li>无尾标:普通</li></ul><h3 id="至强"><a href="#至强" class="headerlink" title="至强"></a>至强</h3><p>可以看Inter自己的介绍。<br><a href="https://www.intel.cn/content/www/cn/zh/products/docs/processors/processor-numbers-data-center.html">https://www.intel.cn/content/www/cn/zh/products/docs/processors/processor-numbers-data-center.html</a>  </p><h2 id="AMD"><a href="#AMD" class="headerlink" title="AMD"></a>AMD</h2><p>我们暂时只介绍锐龙(Ryzen)系列。<br>在系列名Ryzen后跟的是其定位，分R9,R7,R5,R3,类似与Inter的ix<br>再后面是一个四位数字，首位表示代数，目前从1000系列到8000系列<br>后三位表示性能，<del>其实最后一般都是两个0，没啥用</del>越大越好<br>最后有个后缀，含义如下： </p><ul><li>X:支持XFR技术，可以自动超频 </li><li>G:有核显 </li><li>3D:使用3D缓存 </li><li>WX:最新的超多核心线程撕裂者系列 </li><li>PRO:支持一些特别安全技术</li></ul><h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><p>pass </p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>pass </p>]]></content>
    
    
    
    <tags>
      
      <tag>技术</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于咖啡</title>
    <link href="/2024/07/09/%E5%85%B3%E4%BA%8E%E5%92%96%E5%95%A1/"/>
    <url>/2024/07/09/%E5%85%B3%E4%BA%8E%E5%92%96%E5%95%A1/</url>
    
    <content type="html"><![CDATA[<p>对咖啡有一定的兴趣和了解，编一篇短文整合一下网上各版本。如果涉及版权问题联系后本人会尽快删除。  </p><h1 id="咖啡豆"><a href="#咖啡豆" class="headerlink" title="咖啡豆"></a>咖啡豆</h1><p>咖啡豆是咖啡的灵魂。 </p><h2 id="咖啡树种类"><a href="#咖啡树种类" class="headerlink" title="咖啡树种类"></a>咖啡树种类</h2><p>世界主流的咖啡树有三种。<br><strong>1.利比里亚：</strong><br>产自西非，产量低。<br><strong>2.罗布斯塔：</strong><br>味道有明显的苦味，酸度低，口感醇厚，咖啡因含量高，口感一般。速溶咖啡和廉价咖啡的首选，产量<br>占30%~40%。<br><strong>3.阿拉比卡：</strong><br>产于埃塞俄比亚，品质佳，有复杂的香气和较高的酸度，所制咖啡味道均衡。产量占65%左右。 </p><p>一般从口味的取向来看，美国与日本较常饮用阿拉比卡冲泡的淡咖啡，欧洲则是偏好混合阿拉比卡与罗布斯塔做成的意式浓缩咖啡。 </p><h2 id="各咖啡豆特点产地和口味"><a href="#各咖啡豆特点产地和口味" class="headerlink" title="各咖啡豆特点产地和口味"></a>各咖啡豆特点产地和口味</h2><p>咖啡树原产于埃塞俄比亚，属茜草科(Rubiaceae),该科植物有约637属，10700种以上，广泛分布于全球热带<br>和亚热带，少数产于温带。其中咖啡只适合生长于热带和亚热带。降雨量也对咖啡的种植影响极大，咖啡种植区<br>整年的降雨量必须达1500~2259mm。除了气候和雨量，还要有肥沃的土壤和适宜的海拔等，一般来讲，海拔越<br>高越好，优质的咖啡大都产自高原或山地，一些中美洲产区甚至以海拔高度来评定咖啡的等级。 </p><h3 id="巴西"><a href="#巴西" class="headerlink" title="巴西"></a>巴西</h3><p>巴西咖啡大多数是阿拉比卡(Arabica)品种，其次是罗布斯塔(Robusta)品种。<br>巴西咖啡豆本身豆质偏软，没有高海拔咖啡的硬度与浓烈的酸味，大多数巴西咖啡豆豆性属中性：中酸、口味温<br>和而滑润、醇度适中、有淡淡的甜味，可做单品，也可跟其他豆子混合。<br><strong>整体口感：</strong>醇厚甜美，酸度适中，有着类似巧克力、坚果、焦糖的香气。<br><strong>代表品种:</strong> </p><ul><li><p>山多士&#x2F;圣多斯咖啡：巴西各品种中以Santos较著名。对于巴西咖啡来说并没有特别出众的优点，但是也没有<br>明显的缺憾，这种口味温和而滑润、酸度低、醇度适中，有淡淡的甜味，这些所有柔和的味道混合在一起，要<br>想将他们一一分辩出来，是对味蕾的最好考验，这也是许多山度士迷爱好这种咖啡的原因。 </p></li><li><p>波旁咖啡：在巴西东南部米拉斯州(MinasGreais)塞拉多(Cerrado)区的一些庄园里种植着古老的波旁咖<br>啡。这些庄园，如卡平·布兰科庄园(CapinBranco)和维斯塔·阿莱格尔庄园(VistaAllegre)，种植的波旁<br>老品种咖啡也在市上出售。卡平·布兰科咖啡比维斯塔·阿莱格尔咖啡口感更柔滑，而维斯塔·阿莱格尔咖啡浓<br>且黑色，两者酸度较低。</p></li></ul><p><strong>做法：</strong>巴西咖啡豆，豆质偏软，豆表到豆芯的厚度较薄，所以不适合高温烘焙。山多士适合普通程度的烘<br>焙，适合用最大众化的方法冲泡，如意大利浓缩咖啡和各种花式咖啡。 </p><h3 id="pass（以后再补）"><a href="#pass（以后再补）" class="headerlink" title="pass（以后再补）"></a>pass（以后再补）</h3><h1 id="咖啡制作"><a href="#咖啡制作" class="headerlink" title="咖啡制作"></a>咖啡制作</h1><h2 id="咖啡豆的加工"><a href="#咖啡豆的加工" class="headerlink" title="咖啡豆的加工"></a>咖啡豆的加工</h2><ul><li>水洗法 ：咖啡豆加工过程是果肉分离机去皮肉→发酵后取出咖啡豆→晒干。世界上的大部分咖啡都使用水洗处<br>理法。水洗处理法能让咖啡的产地特征、品种特征和酸味在咖啡杯中闪耀。这也是一种被严格控制的方法，<br>能让同批次的咖啡风味一致。另外，先去掉果肉再晒干豆子，可以降低出错的概率。  </li><li>日晒法 ：在采摘咖啡果实后，先不去除果肉，而是先把咖啡果实晒干到可以被机器剥离的程度。正因如此，<br>咖啡果实的味道在干燥过程中会进入豆子，而不像水洗法那样被洗掉。日晒处理法带来的风味非常独特，比<br>水洗的豆子水果味更浓，酸度更低。  </li><li>果肉日晒处理法&#x2F;蜜处理：它的处理过程与水洗法类似，不同的是，咖啡在经过果肉分离机剥离果皮之后，<br>直接进入干燥阶段，部分果肉仍然完好无损。蜜处理的咖啡豆具有一些水洗的特性和一些日晒的特性，既保<br>留了水洗咖啡的酸度，也获得了日晒咖啡的醇厚度、甜感和泥土感，只是缺少了浓郁的水果味。</li></ul><h2 id="烘培"><a href="#烘培" class="headerlink" title="烘培"></a>烘培</h2><p>直接看图。<br><a href="https://pic3.zhimg.com/v2-5e219e1f749da0ce4cee4fca2cb628ce_r.jpg">烘培</a>  </p><h2 id="研磨"><a href="#研磨" class="headerlink" title="研磨"></a>研磨</h2><p>研磨是属于冲泡过程中的前期准备，需要的粗细度只跟你的制作方式（制作工具）有关。器具不同，所需的研<br>磨程度不同。参考下图即可：<br><a href="https://pic3.zhimg.com/80/v2-ca57cf57df126c033572011d1a798aa6_720w.webp">研磨</a><br>买咖啡豆的时候，尽量不要买已经研磨好的。因为磨好的咖啡粉会快速释放咖啡里的味道，特别是浅烘焙，越新<br>鲜的咖啡豆变质得越快。反之，研磨好的咖啡粉基本只有深烘焙的。推荐买个磨豆器自己研磨，这样咖啡豆保存<br>起来也更方便。磨豆器有手动有自动的，一般都可以调节粗细，手动的会便宜很多。如果没有磨豆器，可以根据<br>自己的冲泡方式让店里现场磨成粉，磨好的粉要尽快喝完。</p><p>研磨度虽然分了好几档，但没有绝对的划分。并且手磨的时候，粗研磨里也可能混了细研磨的粉。因此不必太纠结，<br>粗中细选一个大致的程度，多磨几次慢慢调节。注水式的器具一般都选用中度研磨，根据你的滤杯的孔的多少来选<br>择是中粗还是中细。最根本的是影响水流的速度和冲泡时间。一般一个孔的选中细研磨度。</p><p>粗研磨容易保留咖啡豆本来的植物味道，而细研磨更容易萃取咖啡味道，释放更多的咖啡因。因此一般来说，粗<br>研磨适合浅焙，而细研磨适合深焙，但也不绝对。之前提到过浓缩咖啡都是超细研磨的，因为超细研磨更容易吸<br>收咖啡的味道。所以选择器具等于选择了研磨方式，也等于确定了味道的偏好.<br>储藏：咖啡豆&#x2F;研磨好的粉最好用可以单向透气的袋子装，因为它会缓慢释放气体。 </p><h2 id="冲泡"><a href="#冲泡" class="headerlink" title="冲泡"></a>冲泡</h2><p>现做咖啡按照制作方式，又可以分为两大类：浓缩咖啡(Espresso)和萃取咖啡(Brew)。</p><h3 id="浓缩"><a href="#浓缩" class="headerlink" title="浓缩"></a>浓缩</h3><p>浓缩咖啡也经常被称为意式咖啡。之所以称之为浓缩，可以简单理解为是尽量多的把咖啡豆的味道提取到少量水里。<br>因此，浓缩一般都需要深度烘焙+细研磨的咖啡豆，并且制作过程高压，才能保证充分提取咖啡豆里的味道。一般<br>咖啡店里做浓缩咖啡的机器体积比较大，制作出高质量的浓缩咖啡是很看机器的。当然手工方法（完全浸泡式）也<br>可以制作出浓缩咖啡。你可能喝过一杯量又少味又苦的浓缩咖啡，然后发现自己完全不喜欢咖啡，然后疑惑为什么<br>Espresso这个词在咖啡界里这么出名。事实上，我们平时喝到的咖啡混合饮品，比如拿铁、卡普奇诺等都是由浓<br>缩咖啡勾兑而成的。除此以外，所谓的美式咖啡(Caffe Americano, 一个意大利文的名字)也是浓缩咖啡兑水<br>形成的。而咖啡机用的咖啡胶囊，本质上也可以算做是浓缩咖啡。 </p><p>浓缩咖啡是一个很大的分类。为什么浓缩咖啡应用如此广泛，除了口感浓郁和适合做其他咖啡饮品的原料以外，还<br>有一个重要的原因是深烘焙。深烘焙的好处有两点：1. 咖啡豆味道好控制，制作出来的咖啡味道差异会很小（失<br>败率低）2.最适合保存和运输的。而深烘焙咖啡豆的最佳用途就是制作浓缩咖啡。因此，咖啡连锁店出于味道质量<br>控制和原料保存这两点原因，无一例外的都以浓缩咖啡为主。<br>简单来说，浓缩追求的是极尽可能的从咖啡豆里提取大量的咖啡味道，而萃取则追求的是让咖啡味道以外的风味发<br>挥出来。因此两种制作方式做出来的咖啡，味道上是非常不同的。<br>我觉得机器萃取影响味道的最大的问题其实还是在咖啡豆。刚刚在说浓缩咖啡时就提到过原因，像咖啡连锁店，要<br>保证大量的咖啡豆的运输和保存，还要保持咖啡口味一致，都会采用深烘焙的咖啡豆。咖啡豆经过深烘焙之后一定<br>会丧失掉很多风味。</p><h3 id="萃取"><a href="#萃取" class="headerlink" title="萃取"></a>萃取</h3><p>萃取咖啡和浓缩咖啡相比，最大的优势是能提炼出咖啡复杂的风味，区别不同咖啡豆之间的特点。萃取咖啡通常除<br>了应该有的咖啡苦和酸以外，还能尝到甜味，花香味，果实味等。萃取咖啡&#x2F;手工咖啡就是所谓的现代精品咖啡所<br>追求的核心。大家说的最多的手冲咖啡（注水式），还有看起来像化学实验的虹吸壶（完全浸泡式），都属于萃取咖啡。</p><p>另外，萃取咖啡最好是直接饮用，它的乐趣就是体验咖啡最微妙的味道差别，就不要加什么牛奶之类的了。 </p><p>从咖啡萃取程度的角度，可以分为浓缩咖啡(Espresso)和萃取咖啡(Brew)。从工具的角度，也可以分为机器和手工。<br>其中萃取咖啡又可以分为完全浸泡式(Immersion)和注水滴滤式(Drip)。 </p><h4 id="完全浸泡式-Immersion-："><a href="#完全浸泡式-Immersion-：" class="headerlink" title="完全浸泡式(Immersion)："></a>完全浸泡式(Immersion)：</h4><p>完全浸泡法其实很简单，就像泡茶一样，让咖啡粉在热水里浸泡一定时间之后再<br>让咖啡粉分离，就做好了一杯咖啡。掌握好水和咖啡粉的比例，水温和浸泡时间就好了。常见的完全浸泡式咖啡的<br>制作工具有：爱乐压(AeroPress)，法压壶(Press Pot)，虹吸壶(Syphon&#x2F;Vacuum)。这三种制作方式做出来<br>的咖啡口感有明显的区别。 </p><ul><li><strong>法压壶(Press Pot)</strong> 是充分浸泡之后过滤掉咖啡粉，制作过程相对简单，但容易留渣，也容易出现过萃的情况。 </li><li><strong>爱乐压(AeroPress)</strong> 和法压壶最大的不同是用压力加速萃取的过程，制作好的咖啡里不会留残渣，萃取程度<br>上也更容易控制。值得一提的是爱乐压是可以制作出一杯浓缩咖啡的。 </li><li><strong>虹吸壶(Syphon&#x2F;Vacuum)</strong> 简单的来说其实就是通过密封容器里的气体加热膨胀，把煮好的水冲到有咖啡粉的<br>容器里完成浸泡，然后熄火让空气降温收缩，让泡好的咖啡再回到之前的容器里。这个过程让冲泡和过滤咖啡变成<br>了自动的。虹吸壶需要热源，是手工咖啡里成本最高的，同时要通过水温或加热程度来调整萃取时间，冲泡技术要<br>求也是最难的。</li></ul><h4 id="注水滴滤式-Drip-："><a href="#注水滴滤式-Drip-：" class="headerlink" title="注水滴滤式(Drip)："></a>注水滴滤式(Drip)：</h4><p>注水滴滤式冲泡也是我们常听到的手冲咖啡。在过滤杯上铺上滤纸，在倒上咖啡粉再加水。注水式冲泡是通过注水的<br>速度来控制整个萃取的过程。过滤杯有各种各样的造型，也有单孔和多孔之分，不同的过滤杯需要的研磨程度也不同<br>（参看上面研磨部分的配图），也影响水流速度&#x2F;浸泡时间和咖啡粉与水的接触面积。为了更好的控制水流，最好使用<br>细嘴壶。 </p><p>注水式冲泡咖啡有两个关键步骤。第一是开始加粉之前，先用热水把滤纸浸湿。这一步很重要是因为如果滤纸跟过滤杯<br>不服帖的话会影响水流速度，另外通过浸湿部分可以去除一下滤纸和残留在过滤杯上的味道。第二是闷蒸。所谓闷蒸是<br>先加少量的水让咖啡粉湿润，然后静置20-30秒。这个过程可以让咖啡粉充分苏醒，释放掉一些影响味道的气体，让咖<br>啡粉做好准备进入冲泡的状态。而关于注水方式，有圆形画圈也有来回的，有持续冲泡也有分次冲泡的，个人觉得用自<br>己最习惯的不会失误的方式就好。 </p><h1 id="咖啡的风味"><a href="#咖啡的风味" class="headerlink" title="咖啡的风味"></a>咖啡的风味</h1><p>见图。<br><a href="https://pic2.zhimg.com/80/v2-3e81ec69b08f48429ae2abf9aded7ba9_720w.webp">咖啡风味</a> </p><h1 id="常见咖啡种类和配方"><a href="#常见咖啡种类和配方" class="headerlink" title="常见咖啡种类和配方"></a>常见咖啡种类和配方</h1><ul><li><strong>浓缩咖啡(Espresso):</strong> 不赘述。 </li><li><strong>美式咖啡(Cafe Americano):</strong> 浓缩咖啡:水&#x3D;1:2 </li><li><strong>拿铁(Caffe Latte):</strong> 浓缩咖啡:牛奶&#x3D;1:2~1:5  </li><li><strong>玛琪雅朵(Macchiato):</strong> 浓缩咖啡:奶泡&#x3D;2:1 </li><li><strong>卡布奇诺(Cappuccino):</strong> 浓缩咖啡:热牛奶:奶泡&#x3D;1:1:1 </li><li><strong>康宝蓝(Espresso Con Panna):</strong> 浓缩咖啡:鲜奶油&#x3D;2:1 </li><li><strong>摩卡(Mocha):</strong> 浓缩咖啡:巧克力酱:热牛奶:鲜奶油&#x3D;2:1:2:1</li></ul><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><em><a href="https://www.extrabux.com/chs/guide/6498763">https://www.extrabux.com/chs/guide/6498763</a></em> </li><li><em><a href="https://zhuanlan.zhihu.com/p/125618758">https://zhuanlan.zhihu.com/p/125618758</a></em> </li><li><em><a href="https://zhuanlan.zhihu.com/p/30440708">https://zhuanlan.zhihu.com/p/30440708</a></em> </li><li><em>《植物学》（第三版）马炜梁，高等教育出版社</em></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>生活分享</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决hexo上载大文件后持续报错的问题</title>
    <link href="/2024/07/09/%E8%A7%A3%E5%86%B3hexo%E4%B8%8A%E8%BD%BD%E5%A4%A7%E6%96%87%E4%BB%B6%E5%90%8E%E6%8C%81%E7%BB%AD%E6%8A%A5%E9%94%99%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <url>/2024/07/09/%E8%A7%A3%E5%86%B3hexo%E4%B8%8A%E8%BD%BD%E5%A4%A7%E6%96%87%E4%BB%B6%E5%90%8E%E6%8C%81%E7%BB%AD%E6%8A%A5%E9%94%99%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>hexo在上载超过100MB的文件时，由于Github的限制会报错。如<br><code> remote: error: File xx/xx/xx.x is 118.75 MB; this exceeds   GitHub&#39;s file size limit of 100.00 MB</code><br><code> remote: error: GH001: Large files detected. You may want to try Git Large File Storage - https://git-lfs.github.com.</code>  </p><p>之后即使你在本地上做各种修改，譬如删除大文件也还是会报出同样的错误，直接影响了后续操作。<br>而网上关于这个问题的文章有不多，而且过于简略，所以将自己的解决方法放出。 </p><h1 id="问题分析与解决"><a href="#问题分析与解决" class="headerlink" title="问题分析与解决"></a>问题分析与解决</h1><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>由于本地文件已经完全删除，所以问题不会出在真正的上传文件上。事实上问题在于commit记录，我们要从这入手，这也是为什么网上很多解决git上载的方法在这里无效，因为<br>他们是在想办法上载文件，但问题在记录上。现在我们来解决问题。 </p><h2 id="解决（图以后再补）"><a href="#解决（图以后再补）" class="headerlink" title="解决（图以后再补）"></a>解决（图以后再补）</h2><p>在github的界面上点击Actions，然后你可以看到下面是你的提交列表。<br>点击最新的”pages build and deployment”，新界面中，在用户名右边有一串字符，点击 。<br>在新界面中，复制最右方的commit。<br>在本地项目文件夹的.deploy_git文件夹（隐藏文件）中打开命令行，输入<br><code>git reset --hard commitID</code><br>commitID要用复制的替换。<br>最后用<br><code>hexo d -g</code><br>完成。</p>]]></content>
    
    
    
    <tags>
      
      <tag>建站</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一切的新开始</title>
    <link href="/2024/07/07/%E4%B8%80%E5%88%87%E7%9A%84%E6%96%B0%E5%BC%80%E5%A7%8B/"/>
    <url>/2024/07/07/%E4%B8%80%E5%88%87%E7%9A%84%E6%96%B0%E5%BC%80%E5%A7%8B/</url>
    
    <content type="html"><![CDATA[<p>2024&#x2F;7&#x2F;8网站翻新，详见“about” </p><h2 id="本网站标签说明"><a href="#本网站标签说明" class="headerlink" title="本网站标签说明"></a>本网站标签说明</h2><ol><li>Blog：即正常生活所闻所见所感。 </li><li>生活分享：即生活上知识的分享。 </li><li>资源分享：分享文件，网站等。 </li><li>通告：与此网站有关的内容。</li><li>其他：有专业性的以具体门类定标签。</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>通告</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
